(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{180:function(t,e,n){"use strict";n.r(e);var s=n(0),i=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("h2",{attrs:{id:"总结设计组件的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结设计组件的方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结设计组件的方法")]),t._v(" "),n("p",[t._v("独立组件的开发的侧重点是 API 的设计、兼容性、性能、以及复杂的功能。\n而独立组件不含业务，在任何项目中都可以使用，功能单一，比如一个具有数据校验功能的输入框")]),t._v(" "),n("p",[t._v("业务组件是包含部分业务内容，但也需要具有好的复用性和可维护性")]),t._v(" "),n("p",[t._v("在组件开发中，最难的环节应当是解耦组件的交互逻辑，尽量把复杂的逻辑分发到不同的子组件中，然后彼此建立联系，在这其中，计算属性（computed）和混合（mixins）是两个重要的技术点，合理利用，就能发挥出 Vue.js 语言的最大特点：把状态（数据）的维护交给 Vue.js 处理，我们只专注在交互上。")]),t._v(" "),n("p",[t._v("设计一个组件时，先构思使用场景，写几个使用样例，再根据使用的方式及功能设计api")])])}],!1,null,null,null);i.options.__file="组件化设计方法论.md";e.default=i.exports}}]);